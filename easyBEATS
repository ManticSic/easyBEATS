#!/bin/bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

function usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-f] -p param_value arg1 [arg2...]

easyBEATS is a project started to make the installation of Beats packages
faster and easier for Ubuntu, Mac, and even Raspberry Pi (ARM architecture).

Available options:

-h, --help                Print this help and exit.
-v, --verbose             Print script debug info.
    --no-color            Disable colored output.
    --beats               Comma separated list of beats. Possible values:
                            auditbeat, filebeat, heartbeat, metricbeat, packetbeat
    --beat-version        The version tag or commit id of the beats version which
                            should be compiled.
    --compile-only        Compile only. Do not install the packages after
                            compiling.
    --install-deps        Install some needed dependencies. Use only for the
                            first run.
    --no-cleanup          Keep source and temporary files.
    --update-system       Upgrade the whole system.
    --use-no-swap         Disable swap usage, only for systems with 2GB
                            or more of ram.
    --working-directory   This directory will be created in your home directory.


EOF
  exit
}

function cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

function setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

function msg() {
  echo >&2 -e "${1-}"
}

function die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

function parse_params() {
  # default values of variables set from params
  BEATS=()
  BEAT_VERSION=''
  WORKING_DIR=''

  COMPILE_ONLY=0
  INSTALL_DEPS=0
  NO_CLEANUP=0
  UPDATE_SYSTEM=0
  USE_NO_SWAP=0

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    --beats)
      BEATS=(`echo ${2-} | tr ',' ' '`)
      shift
      ;;
    --beat-version)
      BEAT_VERSION="${2-}"
      shift
      ;;
    --compile-only) COMPILE_ONLY=1 ;;
    --install-deps) INSTALL_DEPS=1 ;;
    --no-cleanup) NO_CLEANUP=1 ;;
    --update-system) UPDATE_SYSTEM=1 ;;
    --use-no-swap) USE_NO_SWAP=1 ;;
    --working-directory)  # todo: accept relative and absolute paths
      WORKING_DIR="${2-}"
      shift
      ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  # check required params and arguments
  [[ ${#BEATS[@]} -eq 0 ]] && die "Missing required parameter: beats"
  [[ -z "${BEAT_VERSION-}" ]] && die "Missing required parameter: beat-version"
  [[ -z "${WORKING_DIR-}" ]] && die "Missing required parameter: working-directory"

  return 0
}

parse_params "$@"
setup_colors

# script logic here

msg "${ORANGE}Read parameters:${NOFORMAT}"
msg "beats (${#BEATS[@]}): ${BEATS[*]}"
msg "beat-version: ${BEAT_VERSION}"
msg "compile only: ${COMPILE_ONLY}"
msg "install deps: ${INSTALL_DEPS}"
msg "no cleanup: ${NO_CLEANUP}"
msg "update system: ${UPDATE_SYSTEM}"
msg "use no swap: ${USE_NO_SWAP}"
msg "working directory: ${WORKING_DIR}"


#function clean_up {
#  sudo rm -rf $HOME/${WORKING_DIR}
#  echo "Working directory deleted."
#}
#
#function compile_beats {
#  for beat in "${BEAT_NAME[@]}";
#  do
#    echo "Compiling $beat"
#    cd $HOME/${WORKING_DIR}/src/github.com/elastic/beats/$beat;
#    GOOS=linux GOARCH=arm go get;
#    make;
#    echo "$beat created"
#  done
#  if [ $USE_SWAP = true ];
#  then
#    sudo swapoff -v /swapfile
#    sudo rm /swapfile
#    echo "Swap space disabled."
#  fi
#}
#
#function configure_swap {
#  sudo fallocate -l 2G /swapfile
#  sudo chmod 600 /swapfile
#  sudo mkswap /swapfile
#  sudo swapon /swapfile
#}
#
#function checkout_version {
#  cd $HOME/${WORKING_DIR}/src/github.com/elastic/beats
#  git fetch
#  git checkout $BEAT_VERSION
#}
#
#function copy_source_code {
#  cd $HOME/${WORKING_DIR}/src/github.com/elastic
#  go get github.com/elastic/beats;
#}
#
#function install_dependencies {
#  if [ $(dpkg-query -W -f='${Status}' python-pip 2>/dev/null | grep -c "ok installed") -eq 0 ];
#  then
#    echo "Installing python-pip..."
#    sudo apt-get install python-pip -y;
#  fi
#
#  if [ $(dpkg-query -W -f='${Status}' git 2>/dev/null | grep -c "ok installed") -eq 0 ];
#  then
#    echo "Installing git..."
#    sudo apt-get install git -y;
#  fi
#
#  if python -c 'import pkgutil; exit(pkgutil.find_loader("virtualenv"))';
#  then
#    echo "Installing virtualenv..."
#    pip install virtualenv
#  fi
#
#  if [ $(dpkg-query -W -f='${Status}' make 2>/dev/null | grep -c "ok installed") -eq 0 ];
#  then
#    echo "Installing make..."
#    sudo apt-get install make -y;
#  fi
#
#  if [ $(dpkg-query -W -f='${Status}' gcc 2>/dev/null | grep -c "ok installed") -eq 0 ];
#  then
#    echo "Installing GCC..."
#    sudo apt-get install build-essential manpages-dev -y;
#  fi
#
#  if [ $(dpkg-query -W -f='${Status}' golang-go 2>/dev/null | grep -c "ok installed") -eq 1 ];
#  then
#    echo "Removing outdated go version"
#    sudo apt remove golang-go -y;
#    sudo apt autoremove -y;
#  fi
#
#  echo "Installing go..."
#  wget https://dl.google.com/go/go1.13.8.linux-armv6l.tar.gz
#  sudo tar -C /usr/share -xzf go1.13.8.linux-armv6l.tar.gz
#  sudo chmod -R 775 /usr/share/go/
#  sudo chmod -R 777 /usr/share/go/pkg/linux_arm/
#  export PATH=$PATH:/usr/share/go/bin;
#  export GOPATH=$HOME/${WORKING_DIR};
#  rm go1.13.8.linux-armv6l.tar.gz;
#
#  sudo apt-get install libpcap-dev -y
#
#  echo "Dependency installation complete."
#}
#
#function create_working_directory {
#  mkdir -p $HOME/${WORKING_DIR}/src/github.com/elastic;
#  echo "Working directory created"
#}
#
#function update_system {
#  sudo DEBIAN_FRONTEND=noninteractive apt-get -yq update > /dev/null
#  sudo DEBIAN_FRONTEND=noninteractive apt-get -yq upgrade > /dev/null
#  echo "System update complete"
#}
#
#function install_local {
#  for beat in "${BEAT_NAME[@]}";
#  do
#    if [ ! -d /usr/share/$beat ];
#    then
#      echo "Creating /usr/share/$beat directory..."
#      sudo mkdir -p /usr/share/$beat/bin;
#    fi
#
#    if  [ ! -d /etc/$beat ];
#    then
#      echo "Creating /etc/$beat directory..."
#      sudo mkdir -p /etc/$beat;
#    fi
#
#    if [ ! -d /var/lib/$beat ];
#    then
#      echo "Creating /var/lib/$beat directory..."
#      sudo mkdir -p /var/lib/$beat
#    fi
#
#    echo "Installing $beat locally..."
#    sudo cp $HOME/${WORKING_DIR}/src/github.com/elastic/beats/${beat}/${beat} /usr/share/${beat}/bin
#    sudo cp $HOME/${WORKING_DIR}/src/github.com/elastic/beats/${beat}/${beat}.reference.yml /etc/${beat}
#    sudo cp $HOME/${WORKING_DIR}/src/github.com/elastic/beats/${beat}/${beat}.yml /etc/${beat}
#
#    if [ $beat = "filebeat" ] || [ $beat = "metricbeat" ];
#    then
#      sudo cp -R $HOME/${WORKING_DIR}/src/github.com/elastic/beats/${beat}/module /usr/share/${beat}
#      sudo cp -R $HOME/${WORKING_DIR}/src/github.com/elastic/beats/${beat}/modules.d/ /etc/${beat}
#    fi
#
#    sudo cp $HOME/easyBEATS/services/${beat}.service /lib/systemd/system
#
#
#
#    sudo chmod -R 755 /etc/${beat}/;
#    sudo chown -R root:root /etc/${beat};
#    sudo chown -R root:root /usr/share/${beat}/*;
#    sudo /bin/systemctl daemon-reload;
#    sudo systemctl enable ${beat};
#  done
#}
#
#function execute {
#  echo "---------------------------------------------------------------"
#  if [ $UPDATE_SYSTEM = true ];
#  then
#    echo "Performing system update..."
#    update_system
#  else
#    echo "Skipping system update"
#  fi
#
#  echo "---------------------------------------------------------------"
#
#  if [ ! -d $HOME/${WORKING_DIR} ];
#  then
#    create_working_directory
#  else
#    echo "Working directory already exists"
#  fi
#
#  echo "---------------------------------------------------------------"
#
#  if [ $INSTALL_DEPS = true ];
#  then
#    echo "Installing dependencies..."
#    install_dependencies
#  else
#    export PATH=$PATH:/usr/share/go/bin;
#    export GOPATH=$HOME/${WORKING_DIR};
#    echo "Skipping dependency installation"
#  fi
#
#  echo "---------------------------------------------------------------"
#
#  echo "Copying source code from Elastic"
#  copy_source_code
#
#  echo "---------------------------------------------------------------"
#
#  echo "Checking out Beats version $BEAT_VERSION"
#  checkout_version
#
#  echo "---------------------------------------------------------------"
#
#  if [ $USE_SWAP = true ];
#  then
#    echo "Configuring swap space..."
#    configure_swap
#  else
#    echo "Proceeding without swap space."
#  fi
#
#  echo "---------------------------------------------------------------"
#
#  echo "Compiling Beats..."
#  compile_beats
#
#  echo "---------------------------------------------------------------"
#
#  if [ $INSTALL_LOCAL = true ];
#  then
#    echo "Installing on your local system..."
#    install_local
#  fi
#
#  if [ $CLEAN_UP = true ];
#  then
#    echo "Cleaning up working files..."
#    clean_up
#  fi
#
#  echo "Complete"
#}

function update_system() {
  if [ ${UPDATE_SYSTEM} -eq 1 ]; then
    msg "${ORANGE}Performing system update...${NOFORMAT}"
    sudo DEBIAN_FRONTEND=noninteractive apt-get -yq update > /dev/null
    msg "${ORANGE}Performing system upgrade...${NOFORMAT}"
    sudo DEBIAN_FRONTEND=noninteractive apt-get -yq upgrade > /dev/null
    msg "${GREEN}System update complete${NOFORMAT}"
  else
    msg "${GREEN}Skipping system update${NOFORMAT}"
  fi
}

function create_working_directory() {
  local dir="$HOME/${WORKING_DIR}"

  if [ ! -d dir ]; then
    msg "${ORANGE}Create working directory $dir...${NOFORMAT}"
    mkdir -p "$dir/src/github.com/elastic"
    msg "${GREEN}Working directory created${NOFORMAT}"
  else
    msg "${GREEN}Working directory already exists${NOFORMAT}"
  fi
}

msg "${CYAN}---------------------------------------------------------------${NOFORMAT}"

update_system

msg "${CYAN}---------------------------------------------------------------${NOFORMAT}"

create_working_directory